

// ===== L·ªäCH CHUY√äN C·∫¶N =====
window.addEventListener('load', () => {
  const calendarGrid = document.getElementById("calendar-grid");
  const monthLabels = document.getElementById("month-labels");
  const months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
  const weeksPerMonth = 3;
  const daysPerWeek = 7;

  months.forEach(m => {
    const span = document.createElement("span");
    span.textContent = m;
    monthLabels.appendChild(span);
  });

  for (let m = 0; m < months.length; m++) {
    for (let w = 0; w < weeksPerMonth; w++) {
      for (let d = 0; d < daysPerWeek; d++) {
        const cell = document.createElement("div");
        cell.classList.add("day-cell");
        const activity = Math.floor(Math.random() * 11);
        let level = 0;
        if (activity > 7) level = 4;
        else if (activity > 5) level = 3;
        else if (activity > 2) level = 2;
        else if (activity > 0) level = 1;
        if (level > 0) cell.classList.add(`level-${level}`);
        calendarGrid.appendChild(cell);
      }
    }
  }

  // ===== MODAL =====
  const editButton = document.querySelector(".edit-box");
  const modal = document.getElementById("editModal");
  const closeBtn = document.querySelector(".close-btn");

  editButton.addEventListener("click", () => {
    modal.style.display = "flex";
    document.body.style.overflow = "hidden";
  });

  closeBtn.addEventListener("click", () => {
    modal.style.display = "none";
    document.body.style.overflow = "auto";
  });

  window.addEventListener("click", (event) => {
    if (event.target === modal) {
      modal.style.display = "none";
      document.body.style.overflow = "auto";
    }
  });
});

// ===== BI·ªÇU ƒê·ªí TR√íN TI·∫æN TR√åNH H·ªåC (2 c·∫•p ƒë·ªô) =====
const ctx = document.getElementById("progressChart").getContext("2d");

// D·ªØ li·ªáu t·ªïng th·ªÉ
let totalProgress = 77;
let currentLevel = 1;

// D·ªØ li·ªáu chi ti·∫øt
const skills = ["Ng·ªØ ph√°p", "T·ª´ v·ª±ng", "ƒê·ªçc hi·ªÉu", "Nghe hi·ªÉu", "Kanji"];
const progressData = [80, 65, 50, 40, 70];
const details = {
  "Ng·ªØ ph√°p": ["ƒê√£ h·ªçc 24/30 b√†i", "Ho√†n th√†nh 80%", "C·∫ßn √¥n l·∫°i th·ªÉ „Å¶"],
  "T·ª´ v·ª±ng": ["ƒê√£ h·ªçc 1300/2000 t·ª´", "Ho√†n th√†nh 65%", "T·ªët ·ªü ch·ªß ƒë·ªÅ Gia ƒë√¨nh"],
  "ƒê·ªçc hi·ªÉu": ["10/20 b√†i", "Ho√†n th√†nh 50%", "ƒê·ªçc nhanh, c·∫ßn luy·ªán chi ti·∫øt"],
  "Nghe hi·ªÉu": ["8/20 b√†i", "Ho√†n th√†nh 40%", "TƒÉng luy·ªán h·ªôi tho·∫°i d√†i"],
  "Kanji": ["350/500 ch·ªØ", "Ho√†n th√†nh 70%", "Nh·ªõ t·ªët 5 b·ªô th·ªß ch√≠nh"]
};

// === Plugin: Bo tr√≤n v√† khe h·ªü gi·ªØa 2 ph·∫ßn ===
const roundedGap = {
  id: "roundedGap",
  afterDraw(chart) {
    if (currentLevel !== 1) return; // ch·ªâ v·∫Ω cho c·∫•p t·ªïng th·ªÉ
    const { ctx } = chart;
    const meta = chart.getDatasetMeta(0);
    const arc = meta.data[0];
    if (!arc) return;

    const { x, y } = arc.getProps(["x", "y"], true);
    const radius = arc.outerRadius;
    const thickness = radius - arc.innerRadius;
    const midRadius = arc.innerRadius + thickness / 2;

    const gap = 0.06;
    const startAngle = -Math.PI / 2;
    const endAngle = startAngle + 2 * Math.PI * (totalProgress / 100);

    ctx.save();
    ctx.translate(x, y);
    ctx.lineWidth = thickness;
    ctx.lineCap = "round";

    // üé® 1Ô∏è‚É£ V·∫Ω ph·∫ßn ch∆∞a h·ªçc tr∆∞·ªõc (x√°m khuy·∫øt)
    ctx.strokeStyle = "#e0e0e0";
    ctx.beginPath();
    ctx.arc(0, 0, midRadius, endAngle + gap, startAngle - gap + Math.PI * 2);
    ctx.stroke();

    // üé® 2Ô∏è‚É£ V·∫Ω ph·∫ßn ƒë√£ h·ªçc (xanh bo tr√≤n)
    ctx.strokeStyle = "#1e90ff";
    ctx.beginPath();
    ctx.arc(0, 0, midRadius, startAngle + gap, endAngle - gap);
    ctx.stroke();

    ctx.restore();
  }
};

// === Plugin: Text gi·ªØa v√≤ng ===
const centerText = {
  id: "centerText",
  afterDraw(chart) {
    const { ctx, chartArea: { width, height } } = chart;
    ctx.save();
    ctx.font = "bold 28px Inter";
    ctx.fillStyle = "#2b3e50";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(
      currentLevel === 1 ? `${totalProgress}%` : "Chi ti·∫øt",
      width / 2,
      height / 2
    );
  }
};

// === Bi·ªÉu ƒë·ªì ban ƒë·∫ßu (t·ªïng th·ªÉ) ===
let progressChart = new Chart(ctx, {
  type: "doughnut",
  data: {
    labels: ["ƒê√£ h·ªçc ƒë∆∞·ª£c", "Ch∆∞a h·ªçc"],
    datasets: [{
      data: [totalProgress, 100 - totalProgress],
      backgroundColor: ["#1e90ff", "#e0e0e0"],
      borderWidth: 0
    }]
  },
  options: {
    cutout: "75%",
    plugins: {
      legend: {
        display: true,
        position: "bottom",
        labels: {
          usePointStyle: true,
          boxWidth: 10,
          font: { size: 13 },
          padding: 15
        }
      },
      tooltip: {
        enabled: true,
        backgroundColor: "rgba(0,0,0,0.8)",
        titleFont: { size: 14, weight: "bold" },
        bodyFont: { size: 13 },
        cornerRadius: 8,
        padding: 10,
        callbacks: {
          title: (tooltipItems) => tooltipItems[0].label,
          label: (tooltipItem) =>
            `${tooltipItem.parsed}% ƒë√£ h·ªçc`
        }
      }
    },
    onClick: () => {
      if (currentLevel === 1) showDetailedChart();
      else showOverviewChart();
    }
  },
  plugins: [roundedGap, centerText]
});

// === C·∫•p ƒë·ªô 2: Bi·ªÉu ƒë·ªì chi ti·∫øt ===
function showDetailedChart() {
  currentLevel = 2;

  progressChart.data = {
    labels: skills,
    datasets: [{
      data: progressData,
      backgroundColor: ["#1e90ff", "#40c463", "#ffb347", "#ff6961", "#9370db"],
      borderWidth: 0,
      hoverOffset: 10
    }]
  };

  progressChart.options.plugins.legend = {
    display: true,
    position: "bottom",
    labels: {
      usePointStyle: true,
      boxWidth: 10,
      font: { size: 13 },
      padding: 15
    }
  };

  progressChart.options.plugins.tooltip = {
  enabled: true,
  usePointStyle: false,  // ‚ùå t·∫Øt √¥ vu√¥ng m√†u
  backgroundColor: "rgba(0,0,0,0.85)",
  titleFont: { size: 15, weight: "bold" },
  bodyFont: { size: 13 },
  cornerRadius: 8,
  padding: 10,
  displayColors: false,  // ‚ùå kh√¥ng hi·ªÉn th·ªã √¥ vu√¥ng m√†u tr∆∞·ªõc label
  callbacks: {
    title: (tooltipItems) => `K·ªπ nƒÉng: ${tooltipItems[0].label}`,
    label: (tooltipItem) => {
      const val = tooltipItem.parsed;
      return `ƒê√£ h·ªçc ƒë∆∞·ª£c ${val}%`;
    },
    afterLabel: (tooltipItem) => {
      const skill = tooltipItem.label;
      const extra = details[skill] ? details[skill][0] : "";
      return `\n${extra}`; // ‚úÖ th√™m d√≤ng m·ªõi r√µ r√†ng
    }
  }
};

  progressChart.options.animation = { duration: 700, easing: "easeOutQuart" };
  progressChart.update();
}

// === Quay v·ªÅ t·ªïng th·ªÉ ===
function showOverviewChart() {
  currentLevel = 1;

  progressChart.data = {
    labels: ["ƒê√£ h·ªçc ƒë∆∞·ª£c", "Ch∆∞a h·ªçc"],
    datasets: [{
      data: [totalProgress, 100 - totalProgress],
      backgroundColor: ["#1e90ff", "#e0e0e0"],
      borderWidth: 0
    }]
  };

  progressChart.options.plugins.legend.display = true;
  progressChart.options.plugins.tooltip.enabled = true;

  progressChart.options.animation = { duration: 700, easing: "easeOutQuart" };
  progressChart.update();
}




// ====== X·ª¨ L√ù S·ª¨A TH√îNG TIN C√Å NH√ÇN ======
window.addEventListener("load", () => {
  const editButton = document.querySelector(".edit-box");
  const modal = document.getElementById("editModal");
  const closeBtn = document.querySelector(".close-btn");
  const form = document.getElementById("editForm");
  const nameInput = document.getElementById("name");
  const emailInput = document.getElementById("email");
  const avatarInput = document.getElementById("avatar");

  const profileName = document.querySelector(".profile-name");
  const profileEmail = document.querySelector(".profile-email");
  const profileAvatar = document.querySelector(".profile-avatar");
  const navbarAvatar = document.querySelector(".avatar");

  // üß† Load d·ªØ li·ªáu t·ª´ localStorage n·∫øu c√≥
  const savedName = localStorage.getItem("userName");
  const savedEmail = localStorage.getItem("userEmail");
  const savedAvatar = localStorage.getItem("userAvatar");

  if (savedName) profileName.textContent = savedName;
  if (savedEmail) profileEmail.textContent = savedEmail;
  if (savedAvatar) {
    profileAvatar.src = savedAvatar;
    navbarAvatar.src = savedAvatar;
  }

  // ü™ü M·ªü modal
  editButton.addEventListener("click", () => {
    nameInput.value = profileName.textContent;
    emailInput.value = profileEmail.textContent;
    modal.style.display = "flex";
    document.body.style.overflow = "hidden";
  });

  // ‚ùå ƒê√≥ng modal
  closeBtn.addEventListener("click", () => {
    modal.style.display = "none";
    document.body.style.overflow = "auto";
  });
  window.addEventListener("click", (e) => {
    if (e.target === modal) {
      modal.style.display = "none";
      document.body.style.overflow = "auto";
    }
  });

  // üñºÔ∏è Xem tr∆∞·ªõc ·∫£nh ƒë·∫°i di·ªán
  avatarInput.addEventListener("change", (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        profileAvatar.src = event.target.result;
        navbarAvatar.src = event.target.result;
      };
      reader.readAsDataURL(file);
    }
  });

  // üíæ Khi b·∫•m ‚ÄúL∆∞u thay ƒë·ªïi‚Äù
  form.addEventListener("submit", (e) => {
    e.preventDefault();

    const newName = nameInput.value.trim();
    const newEmail = emailInput.value.trim();

    profileName.textContent = newName;
    profileEmail.textContent = newEmail;

    // N·∫øu ng∆∞·ªùi d√πng ƒë·ªïi ·∫£nh, ƒë√£ c·∫≠p nh·∫≠t ·ªü preview r·ªìi

    // ‚úÖ L∆∞u v√†o localStorage
    localStorage.setItem("userName", newName);
    localStorage.setItem("userEmail", newEmail);
    localStorage.setItem("userAvatar", profileAvatar.src);

    modal.style.display = "none";
    document.body.style.overflow = "auto";

    alert("ƒê√£ l∆∞u thay ƒë·ªïi th√†nh c√¥ng!");
  });
});


// ====== HO·∫†T ƒê·ªòNG G·∫¶N ƒê√ÇY ======
window.addEventListener("load", () => {
  // Danh s√°ch c√°c ho·∫°t ƒë·ªông m·∫´u
  const activities = [
    {
      icon: "üìò",
      title: "Ho√†n th√†nh b√†i Ng·ªØ ph√°p N4 ‚Äì „Å¶ÂΩ¢",
      time: "2 gi·ªù tr∆∞·ªõc",
      type: "nguphap"
    },
    {
      icon: "üó£Ô∏è",
      title: "Luy·ªán nghe: B√†i h·ªôi tho·∫°i s·ªë 5",
      time: "5 gi·ªù tr∆∞·ªõc",
      type: "nghe"
    },
    {
      icon: "üìù",
      title: "L√†m b√†i ki·ªÉm tra Kanji ‚Äì Tu·∫ßn 3",
      time: "H√¥m qua",
      type: "kanji"
    },
    {
      icon: "üéØ",
      title: "ƒê·∫°t m·ªëc 2000 t·ª´ v·ª±ng ƒë√£ h·ªçc",
      time: "2 ng√†y tr∆∞·ªõc",
      type: "tuvung"
    },
    {
      icon: "üèÜ",
      title: "Nh·∫≠n huy hi·ªáu ‚ÄúChƒÉm ch·ªâ th√°ng 10‚Äù",
      time: "3 ng√†y tr∆∞·ªõc",
      type: "thanh_tich"
    },
    {
      icon: "üìñ",
      title: "Ho√†n th√†nh b√†i ƒê·ªçc hi·ªÉu N4 ‚Äì Ch·ªß ƒë·ªÅ Du l·ªãch",
      time: "4 ng√†y tr∆∞·ªõc",
      type: "doc"
    },
    {
      icon: "üèÜ",
      title: "Nh·∫≠n huy hi·ªáu ‚ÄúChƒÉm ch·ªâ th√°ng 10‚Äù",
      time: "3 ng√†y tr∆∞·ªõc",
      type: "thanh_tich"
    },
    {
      icon: "üìñ",
      title: "Ho√†n th√†nh b√†i ƒê·ªçc hi·ªÉu N4 ‚Äì Ch·ªß ƒë·ªÅ Du l·ªãch",
      time: "4 ng√†y tr∆∞·ªõc",
      type: "doc"
    },
    {
      icon: "üèÜ",
      title: "Nh·∫≠n huy hi·ªáu ‚ÄúChƒÉm ch·ªâ th√°ng 10‚Äù",
      time: "3 ng√†y tr∆∞·ªõc",
      type: "thanh_tich"
    },
    {
      icon: "üìñ",
      title: "Ho√†n th√†nh b√†i ƒê·ªçc hi·ªÉu N4 ‚Äì Ch·ªß ƒë·ªÅ Du l·ªãch",
      time: "4 ng√†y tr∆∞·ªõc",
      type: "doc"
    }
  ];

  const activityList = document.getElementById("activityList");

  // H√†m render danh s√°ch ho·∫°t ƒë·ªông
  function renderActivities(list) {
    activityList.innerHTML = ""; // Xo√° danh s√°ch c≈©
    list.forEach((a) => {
      const li = document.createElement("li");
      li.className = "activity-item";

      li.innerHTML = `
        <div class="activity-icon">${a.icon}</div>
        <div class="activity-content">
          <div class="activity-title">${a.title}</div>
          <div class="activity-time">${a.time}</div>
        </div>
      `;
      activityList.appendChild(li);
    });
  }

  // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã ban ƒë·∫ßu
  renderActivities(activities);

  // (Tu·ª≥ ch·ªçn) N·∫øu mu·ªën t·ª± ƒë·ªông th√™m ho·∫°t ƒë·ªông m·ªõi sau v√†i gi√¢y
  // setTimeout(() => {
  //   const newAct = {
  //     icon: "üí¨",
  //     title: "Th·∫£o lu·∫≠n v·ªõi gi√°o vi√™n v·ªÅ Ng·ªØ ph√°p N3",
  //     time: "V·ª´a xong",
  //     type: "nguphap"
  //   };
  //   activities.unshift(newAct); // th√™m l√™n ƒë·∫ßu
  //   renderActivities(activities);
  // }, 5000);
});
